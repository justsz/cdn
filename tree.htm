<!DOCTYPE html>
<!-- basic drawing capability taken from url=(0040)http://bl.ocks.org/mbostock/raw/2429963/ -->
<!-- some tree stuff inspired by https://gist.github.com/kueda/1036776 -->
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="utf-8">
		<title>A tree</title>
		<link rel="stylesheet" type="text/css" href="stylesheets/treeStyles.css">
		<script src="javascript/d3.v3.min.js"></script>
	</head>
<body>
<!-- <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script> -->

<p> Click here to sort leaves alphabetically. </p>
<script>

var width = 400,
    height = 500;
	
var sortedAscending = false;


var y = d3.scale.linear()
		.domain([0, height])
		.range([0, height]);
	
d3.select("p")
	.on("click", sortLeaves);

var counter = 0;
	
var inputFiles = ["data/tree1.json", "data/tree2.json", "data/testTree2.json"];



//read each input file and draw the tree in its own div
for (var i = 0; i < inputFiles.length; i++) {
	console.log("reading " + inputFiles[i]);
	initializeTree(inputFiles[i]);
}


	
function initializeTree(filename) {
	var cluster = d3.layout.cluster()
    .size([height, width - 160])
	.separation( function(a, b) { return 1; } );
	
	var zoom = d3.behavior.zoom()
			.y(y)
			.on("zoom", zoomed);

	
	var div = d3.select("body").append("div")
		.attr("class", "svgBox");
	
		
	var svg = div.append("svg")
		.attr("width", width)
		.attr("height", height)
		.call(zoom)
	  .append("g")
		.attr("transform", "translate(40,0)");

		
	svg.append("svg:rect")
		.attr("width", width)
		.attr("height", height)
		.attr("class", "plot");
	
	d3.json(filename, function(json) {
		var root = json;
		allRoots.push(root);
		var nodes = cluster.nodes(root);
		
		
		var links = svg.selectAll("path.link")
			.data(cluster.links(nodes), getLinkKey)
		.enter().append("path")
		    .attr("class", "link")
			.attr("d", elbow)
		  //.on("mouseover", highlight)
		  //.on("mouseout", unHighlight);
		



		var node = svg.selectAll("g.node")
			.data(nodes, getNodeKey)
		.enter().append("g")
			.attr("class", function(d) {
				if (d.children) {
					if (d.depth == 0) {
						return "root node";
					} else {
						return "inner node";
					}
				} else {
					return "leaf node";
				}
			} )
			.attr("transform", function(d) { return "translate(" + d.y + "," + y(d.x) + ")"; });
			
		//draw root node line. It is placed inside the root nodes g so it transforms along with it.
	    svg.select(".root") 
			.append("path")
	    	.attr("class", "path")
			.attr("d", function(d) {return "M" + 0 + "," + 0 + "h" + -20; });		


		svg.selectAll(".leaf").append("text")
			.attr("dx", 8)
			.attr("dy", 3)
			.attr("text-anchor", "start" )
			.text(function(d) { return d.name; });
		  

	});

	counter++;
}


function elbow(d, i) {
  return "M" + d.source.y + "," + y(d.source.x)
      + "V" + y(d.target.x) + "H" + d.target.y;
}


function zoomed() {
	
	var svg = d3.select(this);
	
	var link = svg.selectAll("path.link")
		.attr("d", elbow);

	var node = svg.selectAll("g.node")
		.attr("transform", function(d) { return "translate(" + d.y + "," + y(d.x) + ")"; })
		

}

var getNodeKey = function(d, i) {
	return (d.name ? d.name : i);
}

var getLinkKey = function(d, i) {
	return (d.target.name ? d.target.name : i);
}






//these functions were made just for testing..
//probably not useful for the final version

function sortLeaves() {
	if (sortedAscending) {
		cluster.sort(function(a,b) { return d3.descending(a.name, b.name)} );
		sortedAscending = false;
	} else {
		cluster.sort(function(a,b) { return d3.ascending(a.name, b.name)} );
		sortedAscending = true;
	}
	
	var nodes = cluster.nodes(root);

		
	var link = svg.selectAll("path.link")
		.data(cluster.links(nodes), getLinkKey)
		.transition()
		.duration(1000)
		.attr("d", elbow);
	
	svg.select("#root")
		.transition()
		.duration(1000)
		.attr("d", "M" + root.y + "," + y(root.x) + "h" + -20);


	var node = svg.selectAll("g.node")
		.data(nodes, getNodeKey)
		.transition()
		.duration(1000)
		.attr("transform", function(d) { return "translate(" + d.y + "," + y(d.x) + ")"; })
	
	
}

var highlight = function() {
	var selectedNodes = cluster.nodes(this.__data__.target);
	//console.log(selectedNodes)
	
  svg.selectAll("path.link")
    .data(cluster.links(selectedNodes), getLinkKey)
	.style("stroke", "orange")
	.style("stroke-width", "2.5px");
}

var unHighlight = function() {
	var selectedNodes = cluster.nodes(this.__data__.target);
	//console.log(selectedNodes)
	
  svg.selectAll("path.link")
    .data(cluster.links(selectedNodes), getLinkKey)
	.style("stroke", "#000")
	.style("stroke-width", "1px");
}



</script>
</body></html>