<!DOCTYPE html>
<!-- basic drawing capability taken from url=(0040)http://bl.ocks.org/mbostock/raw/2429963/ -->
<!-- some tree stuff inspired by https://gist.github.com/kueda/1036776 -->
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="utf-8">
		<title>Treestuff</title>
        <!-- <link rel="stylesheet" href="css/bootstrap-responsive.css"> -->
		<link rel="stylesheet" type="text/css" href="css/treeStyles.css">
        <link rel="stylesheet" type="text/css" href="css/mapStyles.css">
        <link rel="stylesheet" type="text/css" href="css/leaflet.css" />
        <!-- <link rel="stylesheet" media="screen" href="css/bootstrap.css"> -->
        <!-- <meta name="viewport" content="width=device-width, initial-scale=1.0"> -->
		<!-- <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script> -->
		<script src="javascript/d3.v3.min.js"></script>
		<script src="javascript/treestuff.js"></script>
		<script src="javascript/jquery-2.0.2.js"></script>
    	<script src="javascript/circlePanel.js"></script>
    	<script src="javascript/treePanel.js"></script>
    	<script src="javascript/tablePanel.js"></script>
        <script src="javascript/traitPanel.js"></script>
        <script src="javascript/legendPanel.js"></script>
    	<script src="javascript/crossfilter.min.js"></script>
        <script src="javascript/leaflet.js"></script>
	</head>
<body>
<script src="javascript/bootstrap.js"></script>
<div id="map"></div>


<script>
    (function() {
        var provinceLayer = L.Class.extend({
            svg: "",

            g: "",

            bounds: "",

            path: "",

            feature: "",

            initialize: function (latLng) {
                // save position of the layer or any options from the constructor
                //this._latlng = latLng;
            },

            onAdd: function (map) {
                var that = this;
                this._map = map;

                // create a DOM element and put it into one of the map panes
                this._el = L.DomUtil.create('div', 'provinceLayer leaflet-zoom-hide');
                map.getPanes().overlayPane.appendChild(this._el);

                this.svg = d3.select(this._el).append("svg");
                this.g = this.svg.append("g");//.attr("class", "leaflet-zoom-hide");

                d3.json("data/china.geojson", function(collection) {
                    that.bounds = d3.geo.bounds(collection);
                    that.path = d3.geo.path().projection(that._project);

                    that.feature = that.g.selectAll("path")
                                    .data(collection.features)
                                    .enter().append("path");


                // add a viewreset event listener for updating layer's position, do the latter
                    map.on('viewreset', that._reset, that);
                    that._reset();
                });

            },

            onRemove: function (map) {
                // remove layer's DOM elements and listeners
                map.getPanes().overlayPane.removeChild(this._el);
                map.off('viewreset', this._reset, this);
            },

            _reset: function () {
                // update layer's position
                //var pos = this._map.latLngToLayerPoint(this._latlng);
                //L.DomUtil.setPosition(this._el, pos);

                var bottomLeft = this._project(this.bounds[0]),
                topRight = this._project(this.bounds[1]);

                this.svg .attr("width", topRight[0] - bottomLeft[0])
                    .attr("height", bottomLeft[1] - topRight[1])
                    .style("margin-left", bottomLeft[0] + "px")
                    .style("margin-top", topRight[1] + "px");

                this.g   .attr("transform", "translate(" + -bottomLeft[0] + "," + -topRight[1] + ")");

                this.feature.attr("d", this.path);

            },

            _project: function(x) {
                var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
                return [point.x, point.y];
            }
        });

        var tileLayer = new L.TileLayer("http://{s}.tile.cloudmade.com/1a1b06b230af4efdbb989ea99e9841af/998/256/{z}/{x}/{y}.png");
        var provLayer = new provinceLayer([33, 103]);

        var baseLayers = {"Tiles": tileLayer};
        var overlayLayers = {"Provinces": provLayer};


        var map = new L.Map("map", {
          center: [33.966142, 103.710938],
          zoom: 4
        })
        .addLayer(tileLayer)
        .addLayer(provLayer);

        L.control.layers(null, overlayLayers).addTo(map);

        // var svg = d3.select(map.getPanes().overlayPane).append("svg"),
        //     g = svg.append("g").attr("class", "leaflet-zoom-hide");

        // d3.json("data/china.geojson", function(collection) {
        //   var bounds = d3.geo.bounds(collection),
        //       path = d3.geo.path().projection(project);


        // circleCoords = [];    
        // for (var i = 0; i < collection.features.length; i++) {
        //     var centroid = path.centroid(collection.features[i]);
        //     if (centroid) {
        //         centroid = map.layerPointToLatLng(new L.Point(centroid[0], centroid[1]));
        //         circleCoords.push({center : [centroid.lng, centroid.lat]});
        //     }
        // }

        // var circle = g.selectAll("circle")
        //               .data(circleCoords)
        //               .enter().append("circle").attr("r", 5);

        //   var feature = g.selectAll("path")
        //       .data(collection.features)
        //     .enter().append("path");



        //   map.on("viewreset", reset);
        //   reset();

        //   // Reposition the SVG to cover the features.
        //   function reset() {
        //     var bottomLeft = project(bounds[0]),
        //         topRight = project(bounds[1]);

        //     svg .attr("width", topRight[0] - bottomLeft[0])
        //         .attr("height", bottomLeft[1] - topRight[1])
        //         .style("margin-left", bottomLeft[0] + "px")
        //         .style("margin-top", topRight[1] + "px");

        //     g   .attr("transform", "translate(" + -bottomLeft[0] + "," + -topRight[1] + ")");

        //     feature.attr("d", path);

        //     circle.attr("cx", function(d) {return project(d.center)[0]; })
        //           .attr("cy", function(d) {return project(d.center)[1]; });


        //   }

          // Use Leaflet to implement a D3 geographic projection.
          function project(x) {
            var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
            return [point.x, point.y];
          };
        //});




        var i,
//            inputFiles = ["data/tree1.json", "data/tree2.json"];
            inputFiles = ["data/H9N2 Trees/H9N2.MP.json",
                          "data/H9N2 Trees/H9N2.NP.json",
                          "data/H9N2 Trees/H9N2.NS.json",
                          "data/H9N2 Trees/H9N2.PA.json",
                          "data/H9N2 Trees/H9N2.PB1.json",
                          "data/H9N2 Trees/H9N2.PB2.json"];

        treestuff.addSearchBox();
        treestuff.addColorPicker();
        //treestuff.addTraitBox();
        treestuff.addGlobalZoomButton();

        /*var traitPanel = new treestuff.TraitPanel;
        traitPanel.placePanel();
        treestuff.panels.push(traitPanel);
        */

        var legendPanel = new treestuff.LegendPanel;
        legendPanel.placePanel();
        treestuff.panels.push(legendPanel);

        treestuff.addGlobalTimeAxis();
        /*
        var tablePanel = new treestuff.TablePanel;
        tablePanel.placePanel();
        treestuff.panels.push(tablePanel);
        */
        treestuff.initializeCrossfilter();

        var row = d3.select("body").append("div").attr("class", "treePanels");
        //read each input file and draw the tree in its own div
        for (i = 0; i < inputFiles.length; i++) {
            // if (i % 2 === 0) {
            //     row = d3.select("body").append("div").attr("class", "row");
            // }
            var treePanel = new treestuff.TreePanel;
            treePanel.placePanel(row);
            treePanel.initializePanelData(inputFiles[i]);
            treestuff.panels.push(treePanel);
        }
/*
        var circlePanel = new treestuff.CirclePanel;
        circlePanel.placePanel();
        treestuff.panels.push(circlePanel);
*/        


        

	})();
</script>

</body></html>



















