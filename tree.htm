<!DOCTYPE html>
<!-- basic drawing capability taken from url=(0040)http://bl.ocks.org/mbostock/raw/2429963/ -->
<!-- some tree stuff inspired by https://gist.github.com/kueda/1036776 -->
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="utf-8">
		<title>Treestuff</title>
        <!-- <link rel="stylesheet" href="css/bootstrap-responsive.css"> -->
		<link rel="stylesheet" type="text/css" href="css/treeStyles.css">
        <link rel="stylesheet" type="text/css" href="css/mapStyles.css">
        <link rel="stylesheet" type="text/css" href="css/leaflet.css" />
        <!-- <link rel="stylesheet" media="screen" href="css/bootstrap.css"> -->
        <!-- <meta name="viewport" content="width=device-width, initial-scale=1.0"> -->
		<!-- <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script> -->
		<script src="javascript/d3.v3.min.js"></script>
		<script src="javascript/treestuff.js"></script>
		<script src="javascript/jquery-2.0.2.js"></script>
    	<script src="javascript/circlePanel.js"></script>
    	<script src="javascript/treePanel.js"></script>
    	<script src="javascript/tablePanel.js"></script>
        <script src="javascript/traitPanel.js"></script>
        <script src="javascript/legendPanel.js"></script>
    	<script src="javascript/crossfilter.min.js"></script>
        <script src="javascript/leaflet.js"></script>
	</head>
<body>
<script src="javascript/bootstrap.js"></script>
<div id="map" style="height: 300px"></div>


<script>
    (function() {
        var map = new L.Map("map", {
          center: [37.8, -96.9],
          zoom: 4
        })
        .addLayer(new L.TileLayer("http://{s}.tile.cloudmade.com/1a1b06b230af4efdbb989ea99e9841af/998/256/{z}/{x}/{y}.png"));

        var svg = d3.select(map.getPanes().overlayPane).append("svg"),
            g = svg.append("g").attr("class", "leaflet-zoom-hide");

        d3.json("data/china-province.geojson", function(collection) {
          var bounds = d3.geo.bounds(collection),
              path = d3.geo.path().projection(project);

          var feature = g.selectAll("path")
              .data(collection.features)
            .enter().append("path");

          map.on("viewreset", reset);
          reset();

          // Reposition the SVG to cover the features.
          function reset() {
            var bottomLeft = project(bounds[0]),
                topRight = project(bounds[1]);

            svg .attr("width", topRight[0] - bottomLeft[0])
                .attr("height", bottomLeft[1] - topRight[1])
                .style("margin-left", bottomLeft[0] + "px")
                .style("margin-top", topRight[1] + "px");

            g   .attr("transform", "translate(" + -bottomLeft[0] + "," + -topRight[1] + ")");

            feature.attr("d", path);
          }

          // Use Leaflet to implement a D3 geographic projection.
          function project(x) {
            var point = map.latLngToLayerPoint(new L.LatLng(x[1], x[0]));
            return [point.x, point.y];
          }
        });


        var i,
//            inputFiles = ["data/tree1.json", "data/tree2.json"];
            inputFiles = ["data/H9N2 Trees/H9N2.MP.json",
                          "data/H9N2 Trees/H9N2.NP.json",
                          "data/H9N2 Trees/H9N2.NS.json",
                          "data/H9N2 Trees/H9N2.PA.json",
                          "data/H9N2 Trees/H9N2.PB1.json",
                          "data/H9N2 Trees/H9N2.PB2.json"];

        treestuff.addSearchBox();
        treestuff.addColorPicker();
        //treestuff.addTraitBox();
        treestuff.addGlobalZoomButton();

        /*var traitPanel = new treestuff.TraitPanel;
        traitPanel.placePanel();
        treestuff.panels.push(traitPanel);
        */

        var legendPanel = new treestuff.LegendPanel;
        legendPanel.placePanel();
        treestuff.panels.push(legendPanel);

        treestuff.addGlobalTimeAxis();
        /*
        var tablePanel = new treestuff.TablePanel;
        tablePanel.placePanel();
        treestuff.panels.push(tablePanel);
        */
        treestuff.initializeCrossfilter();

        var row = d3.select("body").append("div").attr("class", "treePanels");
        //read each input file and draw the tree in its own div
        for (i = 0; i < inputFiles.length; i++) {
            // if (i % 2 === 0) {
            //     row = d3.select("body").append("div").attr("class", "row");
            // }
            var treePanel = new treestuff.TreePanel;
            treePanel.placePanel(row);
            treePanel.initializePanelData(inputFiles[i]);
            treestuff.panels.push(treePanel);
        }
/*
        var circlePanel = new treestuff.CirclePanel;
        circlePanel.placePanel();
        treestuff.panels.push(circlePanel);
*/        


        

	})();
</script>

</body></html>