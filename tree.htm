<!DOCTYPE html>
<!-- saved (stolen) from url=(0040)http://bl.ocks.org/mbostock/raw/2429963/ -->
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta charset="utf-8">
		<title>A tree</title>
		<link rel="stylesheet" type="text/css" href="stylesheets/treeStyles.css">
		<script src="javascript/d3.v3.min.js"></script>
	</head>
<body>
<!-- <script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script> -->

<p> Click here to sort leaves alphabetically. </p>
<script>

var width = 700,
    height = 1000;
	
var root;
var sortedAscending = false;

var cluster = d3.layout.cluster()
    .size([height, width - 160])
	.separation( function(a, b) { return 1; } );
	

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height)
  .append("g")
    .attr("transform", "translate(40,0)");
	
d3.select("p")
	.on("click", sortLeaves);
	

	

d3.json("data/randomTree.json", function(json) {
	root = json;
  var nodes = cluster.nodes(root);
	
  var link = svg.selectAll("path.link")
      .data(cluster.links(nodes), getLinkKey)
    .enter().append("path")
      .attr("class", "link")
      .attr("d", elbow);
	
	//draw root node line
   svg.append("path")
	.attr("id", "root")
	.attr("d", "M" + root.y + "," + root.x + "h" + -20);


  var node = svg.selectAll("g.node")
      .data(nodes, getNodeKey)
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })

  //node.append("circle")
   //   .attr("r", 4.5);

  node.append("text")
      .attr("dx", function(d) { return d.children ? -8 : 8; })
      .attr("dy", 3)
      .attr("text-anchor", function(d) { return d.children ? "end" : "start"; })
      .text(function(d) { return d.children ? "" : d.name; }); //only writes leaf names
	  

});

function elbow(d, i) {
  return "M" + d.source.y + "," + d.source.x
      + "V" + d.target.x + "H" + d.target.y;
}


function sortLeaves() {
	if (sortedAscending) {
		cluster.sort(function(a,b) { return d3.descending(a.name, b.name)} );
		sortedAscending = false;
	} else {
		cluster.sort(function(a,b) { return d3.ascending(a.name, b.name)} );
		sortedAscending = true;
	}
	
	var nodes = cluster.nodes(root);

		
	var link = svg.selectAll("path.link")
		.data(cluster.links(nodes), getLinkKey)
		.transition()
		.duration(1000)
		.attr("d", elbow);
	
	svg.select("#root")
		.transition()
		.duration(1000)
		.attr("d", "M" + root.y + "," + root.x + "h" + -20);


	var node = svg.selectAll("g.node")
		.data(nodes, getNodeKey)
		.transition()
		.duration(1000)
		.attr("transform", function(d) { return "translate(" + d.y + "," + d.x + ")"; })
	
	
}

var getNodeKey = function(d, i) {
	return (d.name ? d.name : i);
}

var getLinkKey = function(d, i) {
	return (d.target.name ? d.target.name : i);
}

</script>
</body></html>